# https://grafana.com/docs/loki/latest/configure/#supported-contents-and-default-values-of-lokiyaml

# A comma-separated list of components to run. The default value 'all' runs Loki
# in single binary mode. The value 'read' is an alias to run only read-path
# related components such as the querier and query-frontend, but all in the same
# process. The value 'write' is an alias to run only write-path related
# components such as the distributor and compactor, but all in the same process.
# Supported values: all, compactor, distributor, ingester, querier,
# query-scheduler, ingester-querier, query-frontend, index-gateway, ruler,
# table-manager, read, write. A full list of available targets can be printed
# when running Loki with the '-list-targets' command line flag.
# CLI flag: -target
# [target: <string> | default = "all"]

# Enables authentication through the X-Scope-OrgID header, which must be present
# if true. If false, the OrgID will always be set to 'fake'.
# CLI flag: -auth.enabled
# [auth_enabled: <boolean> | default = true]

# The amount of virtual memory in bytes to reserve as ballast in order to
# optimize garbage collection. Larger ballasts result in fewer garbage
# collection passes, reducing CPU overhead at the cost of heap size. The ballast
# will not consume physical memory, because it is never read from. It will,
# however, distort metrics, because it is counted as live memory.
# CLI flag: -config.ballast-bytes
# [ballast_bytes: <int> | default = 0]

# ----------------------------------------------------------------------------------------------------------------------
# https://grafana.com/docs/loki/latest/configuration/#server
#
# Configures the server of the launched module(s).
server:
  log_level: debug # debug, info, warn, error
  log_format: json # logfmt, json
# ----------------------------------------------------------------------------------------------------------------------
# https://grafana.com/docs/loki/latest/configuration/#distributor
#
# Configures the distributor.
distributor:
  ring: { kvstore: { store: inmemory } }
# ----------------------------------------------------------------------------------------------------------------------
# https://grafana.com/docs/loki/latest/configuration/#querier
#
# Configures the querier. Only appropriate when running all modules or just the
# querier.
querier:
# ----------------------------------------------------------------------------------------------------------------------
# querier_rf1:
# ----------------------------------------------------------------------------------------------------------------------
# https://grafana.com/docs/loki/latest/configuration/#query_scheduler
#
# The query_scheduler block configures the Loki query scheduler. When configured
# it separates the tenant query queues from the query-frontend.
# query_scheduler:
#   max_outstanding_requests_per_tenant: 4096
#   scheduler_ring:
#     kvstore: { store: inmemory }
#     tokens_file_path: /var/lib/loki/query-scheduler-tokens
# ----------------------------------------------------------------------------------------------------------------------
# https://grafana.com/docs/loki/latest/configuration/#frontend
#
# The frontend block configures the Loki query-frontend.
# frontend:
#   max_outstanding_per_tenant: 4096
# ----------------------------------------------------------------------------------------------------------------------
# https://grafana.com/docs/loki/latest/configuration/#query_range
#
# The query_range block configures the query splitting and caching in the Loki
# query-frontend.
# query_range:
#   align_queries_with_step: true
#   parallelise_shardable_queries: true
#   cache_results: true
#   results_cache:
#     { compression: snappy, cache: { embedded_cache: { enabled: true } } }
#   cache_index_stats_results: true
#   cache_volume_results: true
#   cache_instant_metric_results: true
#   instant_metric_query_split_align: true
#   cache_series_results: true
#   cache_label_results: true
# ----------------------------------------------------------------------------------------------------------------------
# https://grafana.com/docs/loki/latest/configuration/#ruler
#
# The ruler block configures the Loki ruler.
ruler:
  ring: { kvstore: { store: inmemory } }
  rule_path: /var/lib/loki/rules
  wal: { dir: /var/lib/loki/ruler-wal }
  storage: { type: local, local: { directory: /var/lib/loki/ruler } }
# ----------------------------------------------------------------------------------------------------------------------
# https://grafana.com/docs/loki/latest/configure/#ingester_client
#
# The ingester_client block configures how the distributor will connect to
# ingesters. Only appropriate when running all components, the distributor, or
# the querier.
ingester_client:
  pool_config:
    client_cleanup_period: 15s
    health_check_ingesters: true
    remote_timeout: 1s
  remote_timeout: 5s
# ----------------------------------------------------------------------------------------------------------------------
# ingester_rf1_client:
# ----------------------------------------------------------------------------------------------------------------------
# https://grafana.com/docs/loki/latest/configuration/#ingester
#
# The ingester block configures the ingester and how the ingester will register
# itself to a key value store.
ingester:
  lifecycler:
    ring: { kvstore: { store: inmemory } }
    tokens_file_path: /var/lib/loki/ingester-tokens
  wal: { dir: /var/lib/loki/ingester-wal, enabled: true }
  shutdown_marker_path: /var/lib/loki/ingester-shutdown-marker
# ----------------------------------------------------------------------------------------------------------------------
# ingester_rf1:
#   lifecycler:
#     ring: { kvstore: { store: inmemory } }
#     tokens_file_path: /var/lib/loki/ingester-rf1-tokens
#   flush_op_backoff: { max_retries: 10 }
# ----------------------------------------------------------------------------------------------------------------------
# pattern_ingester:
#   enabled: true
#   lifecycler:
#     ring: { kvstore: { store: inmemory } }
#     tokens_file_path: /var/lib/loki/pattern-ingester-tokens
# ----------------------------------------------------------------------------------------------------------------------
# https://grafana.com/docs/loki/latest/configuration/#index_gateway
#
# The index_gateway block configures the Loki index gateway server, responsible
# for serving index queries without the need to constantly interact with the
# object store.
index_gateway:
  ring:
    kvstore: { store: inmemory }
    tokens_file_path: /var/lib/loki/index-gateway-tokens
# ----------------------------------------------------------------------------------------------------------------------
# https://grafana.com/docs/loki/latest/configure/#bloom_build
#
# Experimental: The bloom_build block configures the Loki bloom planner and
# builder servers, responsible for building bloom filters.
bloom_build:
  enabled: false
# ----------------------------------------------------------------------------------------------------------------------
# https://grafana.com/docs/loki/latest/configure/#bloom_gateway
#
# Experimental: The bloom_gateway block configures the Loki bloom gateway
# server, responsible for serving queries for filtering chunks based on filter
# expressions.
bloom_gateway:
  enabled: false
# ----------------------------------------------------------------------------------------------------------------------
# https://grafana.com/docs/loki/latest/configuration/#storage_config
#
# The storage_config block configures one of many possible stores for both the
# index and chunks. Which configuration to be picked should be defined in
# schema_config block.
storage_config:
  aws:
    s3forcepathstyle: true
    signature_version: v4
    storage_class: STANDARD
    insecure: true
  tsdb_shipper:
    active_index_directory: /var/lib/loki/tsdb-index
    cache_location: /var/lib/loki/tsdb-cache
# ----------------------------------------------------------------------------------------------------------------------
# https://grafana.com/docs/loki/latest/configuration/#chunk_store_config
#
# The chunk_store_config block configures how chunks will be cached and how long
# to wait before saving them to the backing store.
chunk_store_config:
  chunk_cache_config: { embedded_cache: { enabled: true } }
  chunk_cache_config_l2: { embedded_cache: { enabled: true } }
  write_dedupe_cache_config: { embedded_cache: { enabled: true } }
  l2_chunk_cache_handoff: 30m
  cache_lookups_older_than: 30m
# ----------------------------------------------------------------------------------------------------------------------
# https://grafana.com/docs/loki/latest/configuration/#schema_config
#
# Configures the chunk index schema and where it is stored.
schema_config:
  configs:
    - from: 2020-10-24
      store: tsdb
      object_store: aws
      schema: v13
      index: { prefix: index_, period: 24h }
      chunks: { prefix: chunk_, period: 24h }
# ----------------------------------------------------------------------------------------------------------------------
# https://grafana.com/docs/loki/latest/configuration/#compactor
#
# The compactor block configures the compactor component, which compacts index
# shards for performance.
compactor:
  compactor_ring:
    kvstore: { store: inmemory }
    tokens_file_path: /var/lib/loki/compactor-tokens
  working_directory: /var/lib/loki/compactor
# ----------------------------------------------------------------------------------------------------------------------
# compactor_grpc_client:
# ----------------------------------------------------------------------------------------------------------------------
# https://grafana.com/docs/loki/latest/configuration/#limits_config
#
# The limits_config block configures global and per-tenant limits in Loki.
limits_config:
  deletion_mode: filter-and-delete
  allow_structured_metadata: true
  # split_queries_by_interval: 15m
  # max_query_parallelism: 32
# ----------------------------------------------------------------------------------------------------------------------
# https://grafana.com/docs/loki/latest/configuration/#frontend_worker
#
# The frontend_worker configures the worker - running within the Loki querier -
# picking up and executing queries enqueued by the query-frontend.
# frontend_worker:
#   grpc_client_config: { grpc_compression: snappy }
# ----------------------------------------------------------------------------------------------------------------------
# https://grafana.com/docs/loki/latest/configuration/#table_manager
#
# The table_manager block configures the table manager for retention.
table_manager:
# ----------------------------------------------------------------------------------------------------------------------
# https://grafana.com/docs/loki/latest/configuration/#memberlist
#
# Configuration for memberlist client. Only applies if the selected kvstore is
# memberlist.
#
# When a memberlist config with atleast 1 join_members is defined, kvstore of
# type memberlist is automatically selected for all the components that require
# a ring unless otherwise specified in the component's configuration section.
memberlist:
  abort_if_cluster_join_fails: false
  bind_port: 7946
# ----------------------------------------------------------------------------------------------------------------------
metastore:
  data_dir: /var/lib/loki/metastore-data
  raft: { dir: /var/lib/loki/metastore-raft }
# ----------------------------------------------------------------------------------------------------------------------
metastore_client:
# ----------------------------------------------------------------------------------------------------------------------
partition_ring:
  kvstore: { store: inmemory }
# ----------------------------------------------------------------------------------------------------------------------
kafka_config:
# ----------------------------------------------------------------------------------------------------------------------
kafka_ingester:
  lifecycler:
    ring: { kvstore: { store: inmemory } }
    tokens_file_path: /var/lib/loki/kafka-ingester-tokens
  partition_ring: { kvstore: { store: inmemory } }
# ----------------------------------------------------------------------------------------------------------------------
# https://grafana.com/docs/loki/latest/configuration/#runtime_config
#
# Configuration for 'runtime config' module, responsible for reloading runtime
# configuration file.
runtime_config:
# ----------------------------------------------------------------------------------------------------------------------
# https://grafana.com/docs/loki/latest/configure/#operational_config
#
# These are values which allow you to control aspects of Loki's operation, most
# commonly used for controlling types of higher verbosity logging, the values
# here can be overridden in the `configs` section of the `runtime_config` file.
operational_config:
# ----------------------------------------------------------------------------------------------------------------------
# https://grafana.com/docs/loki/latest/configuration/#tracing
#
# Configuration for tracing.
tracing: { enabled: true }
# ----------------------------------------------------------------------------------------------------------------------
# https://grafana.com/docs/loki/latest/configuration/#analytics
#
# Configuration for usage report.
analytics: { reporting_enabled: false }
# ----------------------------------------------------------------------------------------------------------------------
# https://grafana.com/docs/loki/latest/configuration/#common
#
# Common configuration to be shared between multiple modules. If a more specific
# configuration is given in other sections, the related configuration within
# this section will be ignored.
common:
  ring:
    kvstore: { store: inmemory }
    tokens_file_path: /var/lib/loki/common-tokens
  storage:
    s3:
      s3forcepathstyle: true
      signature_version: v4
      storage_class: STANDARD
      insecure: true
    # congestion_control:
    #   enabled: true
    #   controller: { strategy: aimd }
    #   retry: { strategy: limited }
    #   hedging: { strategy: limited }
# ----------------------------------------------------------------------------------------------------------------------
# How long to wait between SIGTERM and shutdown. After receiving SIGTERM, Loki
# will report 503 Service Unavailable status via /ready endpoint.
# CLI flag: -shutdown-delay
# [shutdown_delay: <duration> | default = 0s]

# Namespace of the metrics that in previous releases had cortex as namespace.
# This setting is deprecated and will be removed in the next minor release.
# CLI flag: -metrics-namespace
# [metrics_namespace: <string> | default = "loki"]
